3.8 Series 
----------

This release adds many new features and fixes some rare bugs.
It is recommended that all users update to this new release.


3.8.1 (2022-07-09)
~~~~~~~~~~~~~~~~~~

TOPAS Version 3.8.1 is Released (9 July 2022)

This is a narrow patch release to fix a bug that only affected the TsJaws component.

The bug caused the TsJaws material to be applied not just to the two jaws themselves,
but to the TsJaws entire envelope volume. This volume was supposed to only contain the parent component’s material (typically Air or Vacuum).

The new TOPAS version can be found in the code repository as "topas_3_8_1…"
Install it as you would any TOPAS release.
As always, take care not to accidentally delete your own parameter files if you delete your old release.

Since this is just a patch release, it uses the same Geant4 data files as the previous release. So if you are upgrading from Topas Version 3.8, there is no need to update the Geant4 data files.


3.8.0 (2022-06-15)
~~~~~~~~~~~~~~~~~~

TOPAS Version 3.8 is Released (15 June 2022)

This release adds many new features and also fixes some rare bugs.
It is recommended that all users update to this new release.

Extensive improvements have been made in all areas. See details below.

As this is a minor TOPAS release, any setup that worked previously should
continue to work with no changes to your parameter files.


Installation Notes:
^^^^^^^^^^^^^^^^^^^

TOPAS 3.8 upgrades the Geant4 version to Geant4.10.07.p03.
Since the underlying Geant4 version has changed,
you will need to install new Geant4 data files.
See the installation guide or README.txt for the complete set of required
Geant4 data files.

Users who build TOPAS with extensions should note that the minimum
required cmake version has been increased to cmake version 3.8.

There is no change to the list of supported operating systems.

See the installation guide or README.txt for further installation details.


Geometry:
^^^^^^^^^

**Added new Component Type: TsEye (Topas Issue #621)**

This component provides a detailed, configurable model of the eye,
including all major eye structures and a configurable tumor.
See new example: examples/Brachytherapy/EyeModel.txt


**Added new Component Type: TsEyePlaque (Topas Issue #622)**

This component provides the ability to model any of the COMS eye plaques.
See new example: examples/Brachytherapy/COMSEyePlaque.txt


**Added ability to override voxel materials based on RT Structures (Topas Issue #401)**

For any voxels within the given structure contour, a specified material can be
assigned for use in place of the material that would have come from HU conversion.
Syntax for the new feature is::

  sv:Ge/Patient/MaterialByRTStructNames = 2 "R_LUNG" "L_LUNG"
  sv:Ge/Patient/MaterialByRTStructMaterials = 2 "vacuum" "G4_W"


**Added an additional optical surface finish: GroundFrontPainted.**

This surface finish option had been accidentally left out of supported options.
An example of using this new parameter is::

  s:Su/MySurface/Finish = "GroundFrontPainted"


**Added ability to set optical properties for patient materials (Topas Issue #581)**

This was previously not possible as TOPAS avoided searching for such properties
(as a way to keep setup fast).
A new parameter allows you to have TOPAS read optical parameters for patient materials::

  b:Ma/SetOpticalPropertiesForPatientMaterials = "True"


**Simplified the method to set MaxStepSize for divided components (Topas Issue #583)**

For the divided components (TsBox, TsCylinder and TsSphere), the only way to
set MaxStepSize in the past was to explicitly set it for the relevant subvolume,
such as::

  d:Ge/Phantom/Phantom_Z_Division/MaxStepSize

In the new system, you can just set MaxStepSize for the overall component::

  d:Ge/Phantom/MaxStepSize

If you continue to set MaxStepSize as in the previous method, this will also work
as the subvolume MaxStepSize will override the value set fo the overall component.


**Added check against user trying to apply Field to World (Topas Issue #383)**

The only component in TOPAS that can not be assigned a Field is the World.
This error is now caught on startup.
Note that if you want a Field to cover essentially the entire World,
the solution is to just create a subcomponent of World that is a tiny bit smaller
than the world itself, assign the field within that subcomponent,
and then put the rest of your simulation geometry within that subcomponent.


**Enhanced checks against invalid parameter values in TsCompensator (Topas Issue #254)**

Checks are now in place to report an error if the compensator is set to have
0 rows, 0 thickness or 0 drill hole radius


**Reduced sensitivity of test on sum of material fractions (Topas Issue #607)**

When you define a material using the most common method, elemental fractions,
TOPAS checks that the sum of the fractions is unity.
We found that the test was too tight given the floating point math behavior
on some machines.
We had been requiring::

  .99999 > totalFractions > 1.00001

We now instead require::

  .9999 > totalFractions > 1.0001

Note that one can also provide factions that do not sum to unity by setting::

  b:Ma/MyMaterial/NormalizeFractions = "True"


**Improved efficiency when only component in parallel world is Group (Topas Issue #630)**

There are situations in which the only component in a TOPAS Parallel World is
a Group component. This might occur, for example, if one uses the Group component
to specify the position of an isotropic particle source.
TOPAS now recognizes that in this situation, even though TOPAS has a Parallel World,
there is no need to invoke Geant4's parallel world physics or navigation systems.


**Removed all cases where CheckForOverlap was adjusted in examples.**

The CheckForOverlap parameter should almost always be left at its default value, True.
Turning it off disables one of the most important integrity checks of the simulation.
We noted that some examples included unnecessary adjustment of this parameter.
This misled users who took these examples as starting points for their setups.
Adjustment of this parameter has now been removed from all examples.


**Fixed bug in TsJaws and TsDivergingMLC position behavior (Topas Issue #578)**

These two component types exhibited strange visual behavior in that they
appeared at one position during startup, and then jumped suddenly to their
correct position only right before the first history was generated.
The component position could also behave strangely under time features.
The issue has been fixed.


**Restored missing Pyrex housing in the Cs-131 LDR source (Topas Issue #637)**

This LDR brachytherapy source design was missing one part, the Pyrex housing,
due to the relevant lines being accidentally commented out.
The relevant lines of the parameter file have now been restored::

  examples/Brachytherapy/LDR/Cs131_IsoRay-CS-1-Rev2.txt



Particle Sources:
^^^^^^^^^^^^^^^^^

**Redesigned option that makes Distributed Source select new points (Topas Issue #599)**

By default, the Distributed Source selects a sample of points at the start
of the simulation, and then generates all histories from the same points
for the entire simulation.
We previously included an option that made the source select a new sample
of points at each new history::

  b:So/MySource/RedistributePointsOnNewHistory = "True"

It has since been shown that this option was not thread-safe.
This option was also not consistent with the TOPAS definition of a Run
(as a set of histories for which all parameters are constant).
A better option has now been introduced::

  b:So/MySource/RedistributePointsOnNewRun = "True"


**Removed need for extra zero bins for Continuous Spectrum (Topas Issue #600)**

A user has shown that when defining a continuous spectrum,
it was necessary to provide extra zeros at the start of
BeamEnergySpectrumValues and BeamEnergySpectrumWeights.
This has now been corrected.
The intended simple design now works correctly, such as::

  s:So/Source/BeamEnergySpectrumType = "Continuous"
  dv:So/Source/BeamEnergySpectrumValues = 3 10.0 15.0 20.0 MeV
  uv:So/Source/BeamEnergySpectrumWeights = 3 0.98 0.01 0.01


**Fixed bug that sometimes caused Volumetric Source to fail (Topas Issue #580)**

In some cases, the Volumetric Source failed to find any possible starting points
for histories, or did not sample from the entire active material volume.
The cause was our incorrect use of the method by which Geant4 provides
the appropriate volume extent. This has been corrected.


**Fixed bug that sometimes caused Distributed Source to crash (Topas Issue #582)**

The source was not handling the case where the associated Component was parameterized.
This case is now handled correctly.


Scoring:
^^^^^^^^

**Added option to "Sparsify" csv files from binned scorers (Topas Issue #585)**

This new option gives you a way to reduce the size of a binned scorer's csv output
by omitting rows for which the accumulated Sum is zero::

  b:Sc/MyScorer/Sparsify = "True"

You can also set the limit to be not zero but some factor of the highest bin Sum::

  u:Sc/MyScorer/SparsifyFactor = .5 # Defaults to 0.

Sparsify is only allowed if you include Sum in your scorer's report options.
Sparsify can not be used if your scorer has Energy or Time Bins.
See new example: examples/Scoring/SparsifyAndSingleIndex.txt


**Added option to for csv output to use single index rather than i,j,k (Topas Issue #585)**

Normally, each line of the csv file for a binned scorer begins with three indices
for the three coordinates (x,y,z or rho,phi,theta or rho,phi,z).
A new option has TOPAS combine these three into a single index,
calculated as ifNjfNk+jfNk+k
To activate the single index feature::

  b:Sc/MyScorer/SingleIndex = "True"

See new example: examples/Scoring/SparsifyAndSingleIndex.txt


**Added option to bin output based on Primary Track kinetic energy (Topas Issue #291)**

There were already three options for what energy should be used when you enable
energy binning::

   s:Sc/*/EBinEnergy = "IncidentTrack" # "IncidentTrack", "PreStep" or "DepositedInStep"

A fourth option has now been added: "PrimaryTrack"


**Adjusted control of when to mark some bins as "not in given RTStruct" (Topas Issue #626)**

In the previous release, when FilterByRTStructure is used, scoring output marked
any bins that were not in the requested RTStruct by setting their output to -1.
This behavior needed to be reconsidered now that FilterByRTStructure works
more generally, including in parallel scoring copies such as the RTDoseGrid.
It is not possible or meaningful to set bins to -1 in the same way for the
parallel scoring situation since a parallel scoring bin may be partly but not completely
in the given structure.
Accordingly, marking bins with -1 will now only be allowed for the original component,
not for parallel scoring copies, and this behavior will be turned off by default.
To enable this feature::

  b:Sc/MyScorer/SetBinToMinusOneIfNotInRTStructure = "True"


**Added simple example of depth dose scoring.**

See new example: examples/Scoring/DepthDose.txt


**Improved error message for case of invalid value for scorer report (Topas Issue #298)**

Error message now lists the allowed values.


Filtering:
^^^^^^^^^^

**Redesigned FilterByRTStructure to support parallel worlds such as RTDoseGrid (Topas Issue #353)**

The usefulness of FilterByRTStructure was previously limited as it could not
be used on parallel world components such as the RTDoseGrid.
The filter logic has been extensively redesigned.
It now works in all cases including RTDoseGrid.


**Added filter information to scoring output (Topas Issue #370)**

The header section of output files now includes notes on any filters that were used.


**Added new filters for ancestor atomic number (Topas Issue #373)**

While we previously had filters that looked at the current particle's atomic number::

  OnlyIncludeParticlesOfAtomicNumber
  OnlyIncludeParticlesNotOfAtomicNumber

this new filter looks at any ancestor's atomic number::

  OnlyIncludeIfParticleOrAncestorOfAtomicNumber
  OnlyIncludeIfParticleOrAncestorNotOfAtomicNumber

See updated example: examples/Scoring/Filters.txt


**Added new filters for ancestor atomic mass (Topas Issue #374)**

While we previously had filters that looked at the current particle's atomic mass::

  OnlyIncludeParticlesOfAtomicMass
  OnlyIncludeParticlesNotOfAtomicMass

this new filter looks at any ancestor's atomic mass::

  OnlyIncludeIfParticleOrAncestorOfAtomicMass
  OnlyIncludeIfParticleOrAncestorNotOfAtomicMass

See updated example: examples/Scoring/Filters.txt


**Added new filters by time of flight (Topas Issue #371)**

New options are::

  OnlyIncludeParticlesWithTimeOfFlightBelow
  OnlyIncludeParticlesWithTimeOfFlightAbove

See updated example: examples/Scoring/Filters.txt


**Added new filters for KE rather than incident particle KE (Topas Issue #369)**

We previously had a filter on the KE of the incident particle,
that is, the KE a particle had when it first hit the scoring component, such as::

  OnlyIncludeParticlesWithInitialKEBelow
  OnlyIncludeParticlesWithInitialKENotBelow
  OnlyIncludeParticlesWithInitialKE
  OnlyIncludeParticlesWithInitialKENot
  OnlyIncludeParticlesWithInitialKEAbove
  OnlyIncludeParticlesWithInitialKENotAbove

However, if the particle then passes through multiple sensitive surfaces,
such as occurs when doing Phase Space scoring on a divided component,
one may instead be interested in the KE at each scoring surface.
To support this, new filters are::

  OnlyIncludeParticlesWithKEBelow
  OnlyIncludeParticlesWithKENotBelow
  OnlyIncludeParticlesWithKE
  OnlyIncludeParticlesWithKENot
  OnlyIncludeParticlesWithKEAbove
  OnlyIncludeParticlesWithKENotAbove

See updated example: examples/Scoring/Filters.txt


**Added new filters for Momentum rather than incident particle Momentum (Topas Issue #369)**

We previously had a filter on the Momentum of the incident particle,
that is, the Momentum a particle had when it first hit the scoring component, such as::

  OnlyIncludeParticlesWithInitialMomentumBelow
  OnlyIncludeParticlesWithInitialMomentumNotBelow
  OnlyIncludeParticlesWithInitialMomentum
  OnlyIncludeParticlesWithInitialMomentumNot
  OnlyIncludeParticlesWithInitialMomentumAbove
  OnlyIncludeParticlesWithInitialMomentumNotAbove

However, if the particle then passes through multiple sensitive surfaces,
such as occurs when doing Phase Space scoring on a divided component,
one may instead be interested in the Momentum at each scoring surface.
To support this, new filters are::

  OnlyIncludeParticlesWithMomentumBelow
  OnlyIncludeParticlesWithMomentumNotBelow
  OnlyIncludeParticlesWithMomentum
  OnlyIncludeParticlesWithMomentumNot
  OnlyIncludeParticlesWithMomentumAbove
  OnlyIncludeParticlesWithMomentumNotAbove

See updated example: examples/Scoring/Filters.txt


**Added filtering by primary track kinetic energy (Topas Issue #291)**

New options allow filtering based not on the current track but on the Primary track::

  OnlyIncludeIfPrimaryParticleKEBelow
  OnlyIncludeIfPrimaryParticleKENotBelow
  OnlyIncludeIfPrimaryParticleKE
  OnlyIncludeIfPrimaryParticleKENot
  OnlyIncludeIfPrimaryParticleKEAbove
  OnlyIncludeIfPrimaryParticleKENotAbove

See updated example: examples/Scoring/Filters.txt


**Added filters for last volume or component interacted in or traversed (Topas Issue #368)**

We previously had many filters on what volumes or components a particle interacted in.
These were sensitive to all of the volumes or components the particle encountered.
New filters restrict this sensitivity to only the Last volume or component encountered,
such as::

  OnlyIncludeIfParticleLastInteractedInVolume
  OnlyIncludeIfParticleNotLastInteractedInComponent
  etc.

See updated example: examples/Scoring/Filters.txt


**Fixed a bug that sometimes prevented some combinations of filters (Topas Issue #579)**

In some complex cases involving multiple filters, the attempt to use a filter such as::

  Sc/MyScorer/OnlyIncludeParticlesOfAtomicNumber

got an error message that seemed to think the user was applying this a a Source filter::

  "Sources cannot be filtered by OnlyIncludeParticlesOfAtomicNumber"

The issue has been fixed.



Graphics:
^^^^^^^^^

**Added ability to zoom directly to a given component (Topas Issue #283)**

For several years, we've had been able to center the view on the given component::

  s:Gr/MyComponent/CenterOn = "SomeComponent"

But we have not had an automatic way to automatically zoom to a value that is
appropriate to contain the given component.
This feature is now supported::

  s:Gr/MyView/ZoomToFit = "SomeComponent"

Note that when ZoomToFit is set to any value other than null,
the other zoom parameter, Gr/MyView/Zoom, will be ignored.


**Added support for Cutaway Planes in OpenGL graphics (Topas Issue #594)**

This feature was previously available only if you issued Geant4 commands directly.
The feature can now be controlled by TOPAS parameters, such as::

  i:Gr/ViewA/nCutawayPlanes = 2
  d:Gr/ViewA/CutawayPlane/1/XPos = 0. cm
  d:Gr/ViewA/CutawayPlane/1/YPos = 0. cm
  d:Gr/ViewA/CutawayPlane/1/ZPos = 0. cm
  u:Gr/ViewA/CutawayPlane/1/XDir = -1.
  u:Gr/ViewA/CutawayPlane/1/YDir = -1.
  u:Gr/ViewA/CutawayPlane/1/ZDir =  0.
  d:Gr/ViewA/CutawayPlane/2/XPos = 0. cm
  d:Gr/ViewA/CutawayPlane/2/YPos = 0. cm
  d:Gr/ViewA/CutawayPlane/2/ZPos = 0. cm
  u:Gr/ViewA/CutawayPlane/2/XDir = -1.
  u:Gr/ViewA/CutawayPlane/2/YDir =  0.
  u:Gr/ViewA/CutawayPlane/2/ZDir =  0. 


**Added ability to visualize animation of particle flight (Topas Issue #608)**

This feature was previously available only if you issued Geant4 commands directly.
The feature can now be controlled by TOPAS parameters, such as::

  ic:Gr/ViewA/ParticleFlightNumberOfFrames = 240
  dc:Gr/ViewA/ParticleFlightTimeStart = 0. ns
  dc:Gr/ViewA/ParticleFlightTimeEnd = 60. ns
  ic:Gr/ViewA/ParticleFlightFramesPerSecond = 30
  uc:Gr/ViewA/ParticleFlightSegmentFactor = 8.
  uc:Gr/ViewA/ParticleFlightFadeFactor = 1.
  dc:Gr/ViewA/ParticleFlightSliceInterval = 0.1 ns

See new example: examples/Graphics/PartcleFlight.txt 


**Added TOPAS vis parameter to control up direction (Topas Issue #302)**

This feature was previously available only if you issued Geant4 commands directly.
The feature can now be controlled by the TOPAS parameter::

  uv:Gr/MyView/UpVector = 3 1. 0. 0.


**Added TOPAS vis parameter to control rotation style (Topas Issue #302)**

This feature was previously available only if you issued Geant4 commands directly.
The feature can now be controlled by the TOPAS parameter::

  s:Gr/MyView/RotationStyle = "Constrained" # "Constrained" or "Free"


**Fixed issue where Step Points failed to draw (Topas Issue #613)**

To have TOPAS draw step points, we have long supported the parameter::

  b:Gr/MyView/IncludeStepPoints = "True"

However we found that this was not working unless one also had::

  b:Gr/MyView/IncludeTrajectories = "True"

This has now been fixed.
Step points can now be included whether or not trajectories are included.


**Added ability to set width of trajectory lines (Topas Issue #286)**

For some time, we have had the ability to set the width of geometry lines::

  i:Gr/MyView/LineWidth = 4

We now also have the ability to control the width of trajectory lines::

  i:Gr/MyView/TrajectoryLineWidth = 4


**Extended Qt GUI Save button to include the OpenGL view information (Topas Issue #522)**

The Qt GUI's Save button stores any changes from the Qt parameter control widget
back into a new TOPAS parameter file.
These saved values did not previously include the OpenGL view information.
So though other parameters could be restored by just replaying the saved file,
the view was not preserved.
View information is now included in the saved parameters, such as::

  d:Gr/ViewA/Phi = 104.135 deg
  d:Gr/ViewA/TargetPointX = 0 mm
  d:Gr/ViewA/TargetPointY = 0 mm
  d:Gr/ViewA/TargetPointZ = 0 mm
  d:Gr/ViewA/Theta = 77.1713 deg
  u:Gr/ViewA/Zoom = 2.30054

Note that this feature uses TargetPoint parameters to precisely restore the view.
TargetPoint overrides any values you have set for the view's CenterOn, TransX or TransY.


**Fixed bug in Gr/MyView/CopyOpenGLToPDF (Topas Issue #614)**

This feature was not working as intended when combined with::

  s:Gr/RefreshEvery = "Run"

Graphics was only being saved at the end of the entire session.
The feature now correctly works for RefreshEvery = "Run".


**Fixed bug in use of multiple color models (Topas Issue #616)**

TOPAS Graphics supports many options for how color should be assigned to trajectories
and steps. The intention was that if you had multiple graphics views, each view could
have its own separate color model. This was not working properly, with the last
view's model overriding the models of other views.
This has now been fixed. Each view can have its own color model.
See various examples: topas/examples/Graphics/ColorBy...



Overall Program FLow:
^^^^^^^^^^^^^^^^^^^^^

**Added new option to RepeatSequence logic (Topas Issue #296)**

The previous TOPAS version added the ability to tell TOPAS to repeat the
entire simulation sequence until a given standard deviation was reached::

  d:Sc/MyScorer/RepeatSequenceUntilStandardDeviationLessThan

Users pointed out that what was needed was instead a Relative standard deviation.
We have now added::

  u:Sc/MyScorer/RepeatSequenceUntilRelativeStandardDeviationLessThan (0 < val < 1)


**Added a way to have TOPAS pause program to wait for Extra Sequence files (Topas Issue #587)**

A user applying TOPAS to small animal studies needed to be able to run a TOPAS calculation
while the animal was still under sedation (using TOPAS in a chain of imaging, planning and
treating an animal during single sedation session). For this user, the time TOPAS spent in
physics initialization was prohibitive.
A new feature called "Extra Sequences" solves this issue.
It allows TOPAS to carry out all of its usual work, then pause and wait for the user
to supply additional information to drive additional work, rather than quit.
Specify the names of one or more "Extra Sequence" files::

  sv:Ts/ExtraSequenceFiles = 1 "ExtraSequence1.txt"

At the end of the normal TOPAS run sequence, TOPAS will look on disk for the
first of these files.
If the normal TOPAS run sequence was set to have no histories, this amounts to having
TOPAS perform all of its initialization and then wait for further instructions.
If the file is found, TOPAS will adjust parameters as found in that file and then
run the simulation according to that file.
If the file is not found, TOPAS will sleep for a given interval and then check again::

  d:Ts/ExtraSequenceSleepInterval = 10. s
  d:Ts/ExtraSequenceSleepLimit = 36000. s # Default is 10 hours

Multiple such files can be specified, with subsequent files use on subsequent iterations::

  sv:Ts/ExtraSequenceFiles = 2 "ExtraSequence1.txt" "ExtraSequence2.txt"

See new example: examples/Basic/ExtraSequences.txt


**Improved control over verbosity of Sources, Scoring and Filtering (Topas Issue #592)**

All had previously been getting their verbosity settings from::

  i:Ts/SequenceVerbosity

Now have separate settings::

  i:So/Verbosity
  i:Sc/Verbosity


**Added ability to limit output to only a single thread (Topas Issue #293)**

In some cases when users were trying to study verbose physics output,
it was annoying that multiple threads repeated the same information.
A new option sets TOPAS so that output is only provided by the first worker thread
(plus of course the main thread)::

  b:Ts/LimitConsoleToOneThread = "True"


**Added ability to set Integer parameters from Unitless parameters (Topas Issue #611)**

This was needed for cases where one might use the new Exponential time feature function
described below to set NumberOfHistoriesInRun.
Result is rounded appropriately.
New parameter forms::

  i:someIntegerParmeter = name_of_unitless_parameter
  i:someIntegerParmeter = integer * name_of_unitless_parameter
  i:someIntegerParmeter = name_of_integer_parameter * name_of_unitless_parameter


**Added new Time Feature Function: Exponential (Topas Issue #611)**

The new function can be specified as::

  s:Tf/Decay/Function = "Exponent"

One can use this to set, for example, an exponential decay rate for a particle source::

  d:Tf/TimelineStart  = 0.0 s
  d:Tf/TimelineEnd    = 100.0 s
  i:Tf/NumberOfSequentialTimes = 100
  s:Tf/Decay/Function = "Exponent"
  u:Tf/Decay/StartValue   = 0.
  d:Tf/Decay/Rate  = -.1 1/s
  i:So/Example/NumberOfHistoriesInRun = 1000 * Tf/Decay/Value


**Improved error message for String Vector parameter (Topas Issue #618)**

A String Vector can not be set from a single String value,
but the error message given in this case was not helpful. It has been improved.


**Corrected warning message for non-existent parameter after equals sign (Topas Issue #390)**

The error message for this case was not helpful. It has been improved.


**Adjusted handling of some errors so that they don't hang in Qt GUI (Topas Issue #641)**

Many error cases that would be fatal if not in the Qt GUI (such as an overlap error),
are handled differently when in the Qt GUI.
We are report these errors but then return control to the GUI so that the
user can adjust parameters and try the run again.
However some errors that should have quit the entire TOPAS session were also just
returning control to the Qt GUI. This has been fixed.


**Improved handling of anomalous tracks and hits (Topas Issue #640)**

There are some situations in which TOPAS detects anomalies in Geant4 performance.
These anomalies involve situations such as tracks no longer having any hits
for the entire rest of the simulation, or scorers being called for steps that do
not appear to be in kind of volume this scorer was attached to.
While we do not understand why any of these anomalies occur, we have seen them on
rare occasions for many years, particularly in simulations that run very large
numbers of histories or that have very complex geometries.
We now provide a comprehensive set of options to control reporting on these anomalies,
and to let you optionally set the simulation to abort after a given number of such
anomalies or after the energy contained in "missed hits" reaches a given threshold.
By default, every such occurrence will be printed to the console, and the job will never abort.
However you can adjust these parameters::

  d:Ts/KilledTrackMaxEnergy
  i:Ts/KilledTrackMaxCount
  i:Ts/KilledTrackMaxReports
  d:Ts/UnscoredHitMaxEnergy
  i:Ts/UnscoredHitMaxCount
  i:Ts/UnscoredHitMaxReports
  d:Ts/ParameterizationErrorMaxEnergy
  i:Ts/ParameterizationErrorMaxCount
  i:Ts/ParameterizationErrorMaxReports
  d:Ts/IndexErrorMaxEnergy
  i:Ts/IndexErrorMaxCount
  i:Ts/IndexErrorMaxReports
  i:Ts/InterruptedHistoryMaxReports



Extensions:
^^^^^^^^^^^

**Added a way for extension scorers to directly control the bin index (Topas Issue #598)**

Previously the index was always calculated as a function of the step's touchable,
so the only method to AccumulateHit was::

  void AccumulateHit(G4Step* aStep, G4double value);

However, some users wanted to set up their own bin indexing schemes,
using some other logic of their own.
Accordingly, we now provide an alternate method that lets you specify whatever index you wish::

  void AccumulateHit(G4Step* aStep, G4double value, G4int index);


**Added protection against shadowing variables in extension components (Topas Issue #615)**

Users writing Geometry Components have sometimes had issues when they accidentally
introduced local variables for fEnvelopePhys and fEnvelopeLog that shadowed the ones
declared in TsVGeometryComponent.hh.
This issue now triggers warnings both during compilation and run.


**Added protection against creating fEnvelopePhys by wrong method (Topas Issue #578)**

Users have reported issues where a custom Geometry Component initially showed up with
correct placement, but then moved to a different, wrong placement just as the run began.
This was caused by setting fEnvelopePhys with the wrong CreatePhysicalVolume method.
Specifically, users were the CreatePhysicalVolume that included rotation and translation,
whereas for the envelope volume, rotation and translation must only be set by separate
built-in TOPAS logic that watches the Rot and Trans parameters.
This situation is now caught automatically and reported during geometry construction.


**Improved CMakeLists.txt to provide more warnings against user errors (Topas Issue #619)**

Potential issues are automatically highlighted during the build.



Geant4 Patch:
^^^^^^^^^^^^^

The included version of Geant4 includes a patch to one G4DNA class intended to improve
accuracy of chemistry. This will have no effect outside of G4DNA chemistry.
The patch is mentioned here merely as a documentation detail.
The changed file is::

  G4DNAWaterDissociationDisplacer.cc

For the exact details of the patch, see::

  topas/geant4_10_07_p03.patch
